import { renderToString } from 'vue/server-renderer'
import { createApp } from './main'
import type { App } from 'vue'
import type { Router } from 'vue-router'
import type { Store } from 'vuex'
import type { State } from './store'

export const getAsyncData = async (
  router: Router,
  store: Store<State>,
  app: App
) => {
  const matchedComponents = router.currentRoute.value.matched.flatMap(
    (record) => Object.values(record.components)
  )

  // add root Component
  matchedComponents.unshift(app._component)

  try {
    await Promise.all(
      matchedComponents.map((component) => {
        if ('asyncData' in component) {
          return component.asyncData({
            store,
            route: router.currentRoute.value,
          })
        }
      })
    )
  } catch (err) {
    console.log(err)
  }
}

export async function render(url: string, manifest: any) {
  const { app, router, store } = createApp()

  // set the router to the desired URL before rendering
  router.push(url)
  await router.isReady()

  await getAsyncData(router, store, app)

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx = {} as any
  let html = await renderToString(app, ctx)

  html += `<script>window.__INITIAL_STATE__ = ${JSON.stringify(
    store.state
  )}</script>`

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest)
  return [html, preloadLinks, ctx, router, store]
}

function renderPreloadLinks(modules: any[], manifest: any) {
  let links = ''
  const seen = new Set()
  modules.forEach((id) => {
    const files = manifest[id]
    if (files) {
      files.forEach((file: string) => {
        if (!seen.has(file)) {
          seen.add(file)
          links += renderPreloadLink(file)
        }
      })
    }
  })
  return links
}

function renderPreloadLink(file: string) {
  if (file.endsWith('.js')) {
    return `<link rel="modulepreload" crossorigin href="${file}">`
  } else if (file.endsWith('.css')) {
    return `<link rel="stylesheet" href="${file}">`
  } else if (file.endsWith('.woff')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`
  } else if (file.endsWith('.woff2')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`
  } else if (file.endsWith('.gif')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/gif">`
  } else if (file.endsWith('.jpg') || file.endsWith('.jpeg')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg">`
  } else if (file.endsWith('.png')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/png">`
  } else {
    // TODO
    return ''
  }
}
